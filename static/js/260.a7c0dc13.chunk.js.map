{"version":3,"file":"static/js/260.a7c0dc13.chunk.js","mappings":"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","sources":["components/Resume/Education/Degree.js","components/Resume/Education.js","components/Resume/Experience/Job.js","components/Resume/Experience.js","components/Resume/ResumeProjects/RProject.js","components/Resume/ResumeProjects.js","components/Resume/References.js","data/resume/positions.js","data/resume/degrees.js","data/resume/resumeprojects.js","pages/Resume.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Degree = ({ data }) => (\n  <article className=\"degree-container\">\n    <header>\n      <h4 className=\"degree\">{data.degree}</h4>\n      <p className=\"school\">\n        <a href={data.link}>{data.school}</a>, {data.year}\n      </p>\n    </header>\n  </article>\n);\n\nDegree.propTypes = {\n  data: PropTypes.shape({\n    degree: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n    school: PropTypes.string.isRequired,\n    year: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Degree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Degree from './Education/Degree';\n\nconst Education = ({ data }) => (\n  <div className=\"education\">\n    <div className=\"link-to\" id=\"education\" />\n    <div className=\"title\">\n      <h3>Education</h3>\n    </div>\n    {data.map((degree) => (\n      <Degree data={degree} key={degree.school} />\n    ))}\n  </div>\n);\n\nEducation.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      school: PropTypes.string,\n      degree: PropTypes.string,\n      link: PropTypes.string,\n      year: PropTypes.string,\n    }),\n  ),\n};\n\nEducation.defaultProps = {\n  data: [],\n};\n\nexport default Education;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Job = ({ data }) => (\n  <article className=\"jobs-container\">\n    <header>\n      <h4>\n        <a href={data.link}>{data.company}</a> - {data.position}\n      </h4>\n      <p className=\"daterange\"> {data.daterange}</p>\n    </header>\n    <ul className=\"points\">\n      {data.points.map((point) => (\n        <li key={point}>{point}</li>\n      ))}\n    </ul>\n  </article>\n);\n\nJob.propTypes = {\n  data: PropTypes.shape({\n    link: PropTypes.string.isRequired,\n    company: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    daterange: PropTypes.string.isRequired,\n    points: PropTypes.arrayOf(PropTypes.string).isRequired,\n  }).isRequired,\n};\n\nexport default Job;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Job from './Experience/Job';\n\nconst Experience = ({ data }) => (\n  <div className=\"experience\">\n    <div className=\"link-to\" id=\"experience\" />\n    <div className=\"title\">\n      <h3>Experience</h3>\n    </div>\n    {data.map((job) => (\n      <Job data={job} key={job.company} />\n    ))}\n  </div>\n);\n\nExperience.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      company: PropTypes.string,\n      position: PropTypes.string,\n      link: PropTypes.string,\n      daterange: PropTypes.string,\n      points: PropTypes.arrayOf(PropTypes.string),\n    }),\n  ),\n};\n\nExperience.defaultProps = {\n  data: [],\n};\n\nexport default Experience;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RProject = ({ data }) => (\n  <article className=\"rprojects-container\">\n    <header>\n      <h4>\n        <a href={data.link}>{data.projectname}</a>\n      </h4>\n      <p className=\"tech\"> {data.tech}</p>\n    </header>\n    <ul className=\"points\">\n      {data.points.map((point) => (\n        <li key={point}>{point}</li>\n      ))}\n    </ul>\n  </article>\n);\n\nRProject.propTypes = {\n  data: PropTypes.shape({\n    projectname: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n    tech: PropTypes.string.isRequired,\n    points: PropTypes.arrayOf(PropTypes.string).isRequired,\n  }).isRequired,\n};\n\nexport default RProject;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RProject from './ResumeProjects/RProject';\n\nconst ResumeProjects = ({ data }) => (\n  <div className=\"projects\">\n    <div className=\"link-to\" id=\"projects\" />\n    <div className=\"title\">\n      <h3>Projects</h3>\n    </div>\n    {data.map((project) => (\n      <RProject data={project} key={project.projectname} />\n    ))}\n  </div>\n);\n\nResumeProjects.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      company: PropTypes.string,\n      position: PropTypes.string,\n      link: PropTypes.string,\n      daterange: PropTypes.string,\n      points: PropTypes.arrayOf(PropTypes.string),\n    }),\n  ),\n};\n\nResumeProjects.defaultProps = {\n  data: [],\n};\n\nexport default ResumeProjects;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst References = () => (\n  <div className=\"references\">\n    <div className=\"link-to\" id=\"references\" />\n    <div className=\"title\">\n      <Link to=\"/contact\">\n        <h3>References are available upon request</h3>\n      </Link>\n    </div>\n  </div>\n);\n\nexport default References;\n","const positions = [\n  {\n    company: 'Amazon Web Services',\n    position: 'Software Development Engineer II',\n    link: 'https://aws.amazon.com/',\n    daterange: 'June 2020 â€“ Present',\n    points: [\n      'Backend development work with AWS Aurora Database Engine team using C/C++',\n      'Filed a patent as lead engineer in a solution using a RL based AI model to predict optimal database configs',\n      'Working on a horizontally scalable sharding solution for Aurora, focused on creating a distributed storage engine that can handle distributed transactions and queries using protocols, consensus, and IPC mechanisms',\n      'Part of core Aurora MySQL team that worked on recent major version, Aurora MySQL 3 (MySQL 8.0)',\n    ],\n  },\n  {\n    company: 'Givex',\n    position: 'Software Developer',\n    link: 'https://www.givex.com/',\n    daterange: 'February 2019 - January 2020',\n    points: [\n      'Backend development work with Python, JavaScript, C/C++, PostgreSQL, and Unix',\n      'Implemented gift card, point of sale and other transaction-based solutions for companies such as Nike, McDonalds, Marriott International, and many more',\n      'Integrated Apple wallet and Google pay, with web services for both, into our gift card systems',\n      'Developed SOAP APIs for integration with third party vendors, such as CAA',\n    ],\n  },\n];\n\nexport default positions;\n","const degrees = [\n  {\n    school: 'University of Toronto - St. George Campus',\n    degree: '',\n    link: 'https://www.utoronto.ca/',\n    year: '2014-2018',\n  },\n];\n\nexport default degrees;\n","const resumeProjects = [\n  {\n    projectname: 'TensorFlow â€“ Google Brain Open-source Project',\n    link: 'https://www.tensorflow.org/',\n    tech: 'C/C++, Python',\n    points: [\n      'Open-source project to help developers create and train machine learning models',\n      'Currently a contributor (labelled on GitHub) working on bug fixes and new feature development',\n    ],\n  },\n  {\n    projectname: 'Cashmi - Android Application',\n    link: 'https://play.google.com/store/apps/details?id=com.application.cashmi',\n    tech: 'Android, Java, Firebase, Facebook SDK',\n    points: [\n      'Provides users with an easy way to split bills/transactions with other users',\n      'Uses Firebase to store user, transaction, and user interaction data',\n      'Makes use of Recycler view and List view to shuffle through the transaction data',\n    ],\n  },\n  {\n    projectname: 'Image Tagger',\n    link: 'https://github.com/PiyushDatta/Image_tagger',\n    tech: 'Java, JavaFX',\n    points: [\n      'Simple to use GUI that allows users to put self-generated tags on images',\n      'Uses a Model-View-Controller design to provide maintainability between the components and the GUI',\n      'Code is Serializable and therefore maintains a record of tagged images, modified images, and modified tags',\n    ],\n  },\n  {\n    projectname: 'SEC Edgar File Downloader',\n    link: 'https://github.com/PiyushDatta/SEC_file_downloader',\n    tech: 'Python, Tkinter, SQlite, Pandas, BeautifulSoup',\n    points: [\n      'Only open-source GUI to download SEC Edgar public filings from SEC website directly',\n      'Optimized code with web scraping to remove the projectâ€™s dependency of a SQL database',\n      'Code is Serializable and therefore maintains a record of user settings and userâ€™s choice of directory',\n    ],\n  },\n  {\n    projectname: 'Two Sigma - AI Competition - Halite 2',\n    link: 'https://halite.io/',\n    tech: 'Python, Tensorflow, Numpy',\n    points: [\n      'Used an artificial neural network to train and teach my bot to beat other bots in a virtual game created by Two Sigma (Ranked top 10% of players in Halite 2)',\n      'Scraped data from google cloud buckets and trained my bot on google cloud virtual machines',\n    ],\n  },\n  {\n    projectname: 'Monte Carlo Pi Approximation Simulation',\n    link: 'https://github.com/PiyushDatta/Monte-Carlo-approximation-of-Pi',\n    tech: 'Python, Django, Angular, Typescript, PostgreSQL',\n    points: [\n      'Uses a circle and square to demonstrate the approximation of pi using the Monte Carlo method',\n      'Created a Django REST API backend that stored x and y points in a PostgreSQL, and a command to populate SQL',\n      'Created an Angular frontend using Typescript and HTML/CSS that called this REST API',\n      'Uploaded project on the cloud (Heroku) where frontend and backend were uploaded to two different websites',\n    ],\n  },\n  {\n    projectname: 'Other',\n    link: '',\n    tech: '',\n    points: [\n      'Friendli (Android Application/Google API/Yelp API/Firebase/Facebook SDK)',\n      'Weather App (Node Js/Express/Openweathermap API)',\n      'Craigslist Scraper (Django/Python Web Application/Heroku/BeautifulSoup4)',\n      'Personal Website (Node Js/React/React-Router/Express/Webpack)',\n    ],\n  },\n];\n\nexport default resumeProjects;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\n\nimport Education from '../components/Resume/Education';\nimport Experience from '../components/Resume/Experience';\nimport Projects from '../components/Resume/ResumeProjects';\n// import Skills from '../components/Resume/Skills';\n// import Courses from '../components/Resume/Courses';\nimport References from '../components/Resume/References';\n\n// import courses from '../data/resume/courses';\nimport positions from '../data/resume/positions';\nimport degrees from '../data/resume/degrees';\nimport resumeProjects from '../data/resume/resumeprojects';\n\n// import { skills, categories } from '../data/resume/skills';\n\nconst { PUBLIC_URL } = process.env; // set automatically from package.json:homepage\n\n// NOTE: sections are displayed in order defined.\nconst sections = {\n  Experience: () => <Experience data={positions} />,\n  Projects: () => <Projects data={resumeProjects} />,\n  Education: () => <Education data={degrees} />,\n  // Skills: () => <Skills skills={skills} categories={categories} />,\n  // Courses: () => <Courses data={courses} />,\n  References: () => <References />,\n};\n\nconst Resume = () => (\n  <Main\n    title=\"Resume\"\n    description=\"Piyush Datta's Resume. Smile Identity, Arthena, Matroid, YC, Skeptical Investments, Stanford ICME, Planet, and Facebook.\"\n  >\n    <article className=\"post\" id=\"resume\">\n      <header>\n        <div className=\"title\">\n          <h2>\n            <Link to=\"resume\">Resume</Link>&nbsp;&nbsp;\n            <a href={`${PUBLIC_URL}/public/resumes/piyush_datta_resume.pdf`}>\n              (PDF Version)\n            </a>\n          </h2>\n          <div className=\"link-container\">\n            {Object.keys(sections).map((sec) => (\n              <h4 key={sec}>\n                <a href={`#${sec.toLowerCase()}`}>{sec}</a>\n              </h4>\n            ))}\n          </div>\n        </div>\n      </header>\n      {Object.entries(sections).map(([name, Section]) => (\n        <Section key={name} />\n      ))}\n    </article>\n  </Main>\n);\n\nexport default Resume;\n"],"names":["_ref","data","_jsx","className","children","_jsxs","degree","href","link","school","year","Education","id","map","Degree","defaultProps","company","position","daterange","points","point","Experience","job","Job","projectname","tech","ResumeProjects","project","RProject","References","Link","to","PUBLIC_URL","process","sections","positions","Projects","resumeProjects","degrees","Resume","Main","title","description","concat","Object","keys","sec","toLowerCase","entries","name","Section"],"sourceRoot":""}